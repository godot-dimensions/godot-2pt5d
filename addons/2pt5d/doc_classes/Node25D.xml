<?xml version="1.0" encoding="UTF-8" ?>
<class name="Node25D" inherits="CanvasItem" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		2.5-dimensional node, inherited by all 2.5D nodes.
	</brief_description>
	<description>
		Node25D is the base class for all 2.5-dimensional nodes. For the purposes of this class, "2.5D" refers to objects that have transform math done in 3D space, including a 3D position, but are rendered in 2D as a [CanvasItem].
		[b]Note:[/b] If you are looking for the other type of 2.5D, with 3D graphics but 2D transforms, simply use [Node3D] instead and lock the Z axis to zero. That type does not require a new node class to accomplish.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="global_rotate_2d">
			<return type="void" />
			<param index="0" name="rotation" type="float" />
			<description>
				Rotates the global 3D transform of the node by the rotation that corresponds to the given global 2D rotation in radians.
			</description>
		</method>
		<method name="global_translate_2d">
			<return type="void" />
			<param index="0" name="offset" type="Vector2" />
			<description>
				Translates the global 3D transform of the node by the offset that corresponds to the given global 2D offset.
			</description>
		</method>
		<method name="local_rotate_2d">
			<return type="void" />
			<param index="0" name="rotation" type="float" />
			<description>
				Rotates the local 3D transform of the node by the rotation that corresponds to the given local 2D rotation in radians.
			</description>
		</method>
	</methods>
	<members>
		<member name="basis_3d" type="Basis" setter="set_basis_3d" getter="get_basis_3d">
			The local 3D [Basis] of the node, representing the 3D rotation, scale, and skew/shear, relative to the parent.
		</member>
		<member name="euler_3d" type="Vector3" setter="set_euler_3d" getter="get_euler_3d">
			The local 3D Euler angles of the node, as a [Vector3] in radians.
		</member>
		<member name="global_basis_3d" type="Basis" setter="set_global_basis_3d" getter="get_global_basis_3d">
			The global 3D [Basis] of the node, relative to the world origin.
		</member>
		<member name="global_position_2d" type="Vector2" setter="set_global_position_2d" getter="get_global_position_2d">
			The global 2D position of the node, relative to the world origin. This is calculated from the 3D position and the [member world_25d] property. This property is not recommended to be set, instead set [member global_position_3d] and let the [member world_25d] property handle the conversion to 2D.
		</member>
		<member name="global_position_3d" type="Vector3" setter="set_global_position_3d" getter="get_global_position_3d">
			The global 3D position of the node, relative to the world origin. The actual 2D position depends on this property and the [member world_25d] property.
		</member>
		<member name="global_rotation_2d" type="float" setter="set_global_rotation_2d" getter="get_global_rotation_2d">
			The global 2D rotation of the node, in radians.
		</member>
		<member name="global_transform_2d" type="Transform2D" setter="set_global_transform_2d" getter="get_global_transform_2d">
			The global 2D transform of the node, a combination of both [member global_rotation_2d] and [member global_position_2d]. This property is not recommended to be set, instead set [member global_transform_3d] and let the [member world_25d] property handle the conversion to 2D.
		</member>
		<member name="global_transform_3d" type="Transform3D" setter="set_global_transform_3d" getter="get_global_transform_3d">
			The global 3D transform of the node, a combination of both [member global_basis_3d] and [member global_position_3d].
		</member>
		<member name="local_position_2d" type="Vector2" setter="set_local_position_2d" getter="get_local_position_2d">
			The local 2D position of the node, relative to the parent. This property is recommended to not be set, instead set [member position_3d] and let the [member world_25d] property handle the conversion to 2D.
		</member>
		<member name="local_rotation_2d" type="float" setter="set_local_rotation_2d" getter="get_local_rotation_2d">
			The local 2D rotation of the node, in radians.
		</member>
		<member name="local_transform_2d" type="Transform2D" setter="set_local_transform_2d" getter="get_local_transform_2d">
			The local 2D transform of the node, a combination of both [member local_rotation_2d] and [member local_position_2d]. This property is recommended to not be set, instead set [member transform_3d] and let the [member world_25d] property handle the conversion to 2D.
		</member>
		<member name="position_3d" type="Vector3" setter="set_position_3d" getter="get_position_3d" default="Vector3(0, 0, 0)">
			The local 3D position of the node, relative to the parent.
		</member>
		<member name="quaternion_3d" type="Quaternion" setter="set_quaternion_3d" getter="get_quaternion_3d">
			The local 3D quaternion of the node, representing the 3D rotation relative to the parent.
		</member>
		<member name="rotation_edit_mode" type="int" setter="set_rotation_edit_mode" getter="get_rotation_edit_mode" enum="Node25D.RotationEditMode" default="0">
			The rotation edit mode for the node. This affects which rotation property is used for editing the rotation in the editor. See [enum RotationEditMode] for options.
		</member>
		<member name="transform_3d" type="Transform3D" setter="set_transform_3d" getter="get_transform_3d">
			The local 3D transform of the node, a combination of both [member basis_3d] and [member position_3d].
		</member>
		<member name="world_25d" type="World25D" setter="set_world_25d" getter="get_world_25d">
			The [World25D] context in which the node exists. It contains a 2.5D basis for converting 3D coordinates into 2D coordinates for rendering in the 2D canvas.
		</member>
	</members>
	<constants>
		<constant name="ROTATION_EDIT_MODE_NONE" value="0" enum="RotationEditMode">
			Do not edit the rotation, or save the rotation in any way.
		</constant>
		<constant name="ROTATION_EDIT_MODE_2D_ANGLE" value="1" enum="RotationEditMode">
			Use [member local_rotation_2d] for editing the rotation, and save the rotation in [member basis_3d] (must save as a 3D rotation).
		</constant>
		<constant name="ROTATION_EDIT_MODE_3D_EULER" value="2" enum="RotationEditMode">
			Use [member euler_3d] for editing the rotation, and save the rotation in [member euler_3d].
		</constant>
		<constant name="ROTATION_EDIT_MODE_3D_QUATERNION" value="3" enum="RotationEditMode">
			Use [member quaternion_3d] for editing the rotation, and save the rotation in [member quaternion_3d].
		</constant>
		<constant name="ROTATION_EDIT_MODE_3D_BASIS" value="4" enum="RotationEditMode">
			Use [member basis_3d] for editing the rotation, and save the rotation in [member basis_3d].
		</constant>
	</constants>
</class>
