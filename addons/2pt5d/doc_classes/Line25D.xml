<?xml version="1.0" encoding="UTF-8" ?>
<class name="Line25D" inherits="Node25D" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		A 2.5D polyline that can optionally be textured.
	</brief_description>
	<description>
		This node draws a 2.5D polyline, a shape consisting of several points connected by segments. It is intended for rendering and it can be colored and optionally textured.
		This node inherits [Node25D] for ease of use in the 2.5D editor and so it has a 3D transform, but it uses a [Line2D] internally for rendering. Using this node is optional, you can also just add a [Line2D] as a child of a [Node25D] to achieve the same effect. If you need to access the internal line, use [method get_line_2d].
	</description>
	<tutorials>
		<link title="Matrix Transform Demo">https://godotengine.org/asset-library/asset/2787</link>
		<link title="2.5D Game Demo">https://godotengine.org/asset-library/asset/2783</link>
	</tutorials>
	<methods>
		<method name="add_point">
			<return type="void" />
			<param index="0" name="position" type="Vector3" />
			<param index="1" name="at_index" type="int" default="-1" />
			<description>
				Adds a point with the specified [param position] relative to the polyline's own position. If no [param at_index] is provided, the new point will be added to the end of the points array.
				If [param at_index] is given, the new point is inserted before the existing point identified by index [param at_index]. The indices of the points after the new point get increased by 1. The provided [param at_index] must not exceed the number of existing points in the polyline. See [method get_point_count].
			</description>
		</method>
		<method name="clear_points">
			<return type="void" />
			<description>
				Removes all points from the polyline, making it empty.
			</description>
		</method>
		<method name="get_line_2d" qualifiers="const">
			<return type="Line2D" />
			<description>
				Returns the internal [Line2D] node used for rendering. This can be used to access the line's properties and methods directly. This is an internal node, freeing it may cause a crash.
			</description>
		</method>
		<method name="get_point_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of points in the polyline.
			</description>
		</method>
		<method name="get_point_position" qualifiers="const">
			<return type="Vector3" />
			<param index="0" name="index" type="int" />
			<description>
				Returns the position of the point at index [param index].
			</description>
		</method>
		<method name="remove_point">
			<return type="void" />
			<param index="0" name="index" type="int" />
			<description>
				Removes the point at index [param index] from the polyline.
			</description>
		</method>
		<method name="set_point_position">
			<return type="void" />
			<param index="0" name="index" type="int" />
			<param index="1" name="position" type="Vector3" />
			<description>
				Overwrites the position of the point at the given [param index] with the supplied [param position].
			</description>
		</method>
	</methods>
	<members>
		<member name="begin_cap_mode" type="int" setter="set_begin_cap_mode" getter="get_begin_cap_mode" enum="Line2D.LineCapMode" default="0">
			The style of the beginning of the polyline, if [member is_closed] is [code]false[/code]. Use [enum Line2D.LineCapMode] constants.
		</member>
		<member name="default_color" type="Color" setter="set_default_color" getter="get_default_color" default="Color(1, 1, 1, 1)">
			The color of the polyline. Will not be used if a gradient is set.
		</member>
		<member name="end_cap_mode" type="int" setter="set_end_cap_mode" getter="get_end_cap_mode" enum="Line2D.LineCapMode" default="0">
			The style of the end of the polyline, if [member is_closed] is [code]false[/code]. Use [enum Line2D.LineCapMode] constants.
		</member>
		<member name="is_closed" type="bool" setter="set_is_closed" getter="get_is_closed" default="false">
			If [code]true[/code] and the polyline has more than 2 points, the last point and the first one will be connected by a segment.
		</member>
		<member name="joint_mode" type="int" setter="set_joint_mode" getter="get_joint_mode" enum="Line2D.LineJointMode" default="0">
			The style of the connections between segments of the polyline. Use [enum Line2D.LineJointMode] constants.
		</member>
		<member name="points_3d" type="PackedVector3Array" setter="set_points_3d" getter="get_points_3d" default="PackedVector3Array()">
			The 3D points of the polyline. These are projected into 2D space based on the [World25D] settings, and passed to the internal [Line2D]. Segments are drawn between the adjacent points in this array.
		</member>
		<member name="use_node_transform" type="bool" setter="set_use_node_transform" getter="get_use_node_transform" default="true">
			If [code]true[/code], use both the 2D and 3D transforms of the 2.5D node to ensure each point is drawn in the correct global position (default). If [code]false[/code], transform points from 3D to 2D using only the [World25D], and place the points in the node's local 2D space (faster, works the same for non-rotated non-scaled nodes).
		</member>
		<member name="width" type="float" setter="set_width" getter="get_width" default="10.0">
			The polyline's width.
		</member>
	</members>
</class>
